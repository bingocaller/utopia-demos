/* @link https://utopia.fyi/space/calculator?c=320,20,1.125,1440,24,1.25,5,2,768&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l */

:root {
  --fc-3xs-min: (var(--fc-s-min) * 0.25);
  --fc-3xs-max: (var(--fc-s-max) * 0.25);

  --fc-2xs-min: (var(--fc-s-min) * 0.5);
  --fc-2xs-max: (var(--fc-s-max) * 0.5);

  --fc-xs-min: (var(--fc-s-min) * 0.75);
  --fc-xs-max: (var(--fc-s-max) * 0.75);

  --fc-s-min: (var(--f-0-min));
  --fc-s-max: (var(--f-0-max));

  --fc-m-min: (var(--fc-s-min) * 1.5);
  --fc-m-max: (var(--fc-s-max) * 1.5);

  --fc-l-min: (var(--fc-s-min) * 2);
  --fc-l-max: (var(--fc-s-max) * 2);

  --fc-xl-min: (var(--fc-s-min) * 3);
  --fc-xl-max: (var(--fc-s-max) * 3);

  --fc-2xl-min: (var(--fc-s-min) * 4);
  --fc-2xl-max: (var(--fc-s-max) * 4);

  --fc-3xl-min: (var(--fc-s-min) * 6);
  --fc-3xl-max: (var(--fc-s-max) * 6);

  /* T-shirt sizes */
  --space-3xs: calc(((var(--fc-3xs-min) / 16) * 1rem) + (var(--fc-3xs-max) - var(--fc-3xs-min)) * var(--fluid-bp));
  --space-2xs: calc(((var(--fc-2xs-min) / 16) * 1rem) + (var(--fc-2xs-max) - var(--fc-2xs-min)) * var(--fluid-bp));
  --space-xs: calc(((var(--fc-xs-min) / 16) * 1rem) + (var(--fc-xs-max) - var(--fc-xs-min)) * var(--fluid-bp));
  --space-s: calc(((var(--fc-s-min) / 16) * 1rem) + (var(--fc-s-max) - var(--fc-s-min)) * var(--fluid-bp));
  --space-m: calc(((var(--fc-m-min) / 16) * 1rem) + (var(--fc-m-max) - var(--fc-m-min)) * var(--fluid-bp));
  --space-l: calc(((var(--fc-l-min) / 16) * 1rem) + (var(--fc-l-max) - var(--fc-l-min)) * var(--fluid-bp));
  --space-xl: calc(((var(--fc-xl-min) / 16) * 1rem) + (var(--fc-xl-max) - var(--fc-xl-min)) * var(--fluid-bp));
  --space-2xl: calc(((var(--fc-2xl-min) / 16) * 1rem) + (var(--fc-2xl-max) - var(--fc-2xl-min)) * var(--fluid-bp));
  --space-3xl: calc(((var(--fc-3xl-min) / 16) * 1rem) + (var(--fc-3xl-max) - var(--fc-3xl-min)) * var(--fluid-bp));
  
  /* One-up pairs */
  --space-3xs-2xs: calc(((var(--fc-3xs-min) / 16) * 1rem) + (var(--fc-2xs-max) - var(--fc-3xs-min)) * var(--fluid-bp));
  --space-2xs-xs: calc(((var(--fc-2xs-min) / 16) * 1rem) + (var(--fc-xs-max) - var(--fc-2xs-min)) * var(--fluid-bp));
  --space-xs-s: calc(((var(--fc-xs-min) / 16) * 1rem) + (var(--fc-s-max) - var(--fc-xs-min)) * var(--fluid-bp));
  --space-s-m: calc(((var(--fc-s-min) / 16) * 1rem) + (var(--fc-m-max) - var(--fc-s-min)) * var(--fluid-bp));
  --space-m-l: calc(((var(--fc-m-min) / 16) * 1rem) + (var(--fc-l-max) - var(--fc-m-min)) * var(--fluid-bp));
  --space-l-xl: calc(((var(--fc-l-min) / 16) * 1rem) + (var(--fc-xl-max) - var(--fc-l-min)) * var(--fluid-bp));
  --space-xl-2xl: calc(((var(--fc-xl-min) / 16) * 1rem) + (var(--fc-2xl-max) - var(--fc-xl-min)) * var(--fluid-bp));
  --space-2xl-3xl: calc(((var(--fc-2xl-min) / 16) * 1rem) + (var(--fc-3xl-max) - var(--fc-2xl-min)) * var(--fluid-bp));

  /* Custom pairs */
  --space-s-l: calc(((var(--fc-s-min) / 16) * 1rem) + (var(--fc-l-max) - var(--fc-s-min)) * var(--fluid-bp));
}

$sizes: (
  ('2xs', #f00),
  ('xs', #f80),
  ('s', #ff0),
  ('m', #0f0),
  ('l', #00f),
  ('xl', #80f),
  ('2xl', #f0f),
);

$types: (
  'margin',
  'padding',
);

$directions: (
  'block',
  'block-start',
  'block-end',
  'inline',
  'inline-start',
  'inline-end',
);

@mixin spacer-visualiser($size, $color, $type, $direction: null) {
  position: relative;

  &::before,
  &::after {
    position: absolute;
    inset: 0;
  }

  &::before {
    border-width: 0;
    border-style: solid;
    border-color: #{$color}3;
    content: '';

    @if $type == 'margin' {
      // Move visualiser border outside element
      inset-#{$direction}: calc(-1 * var(--space-#{$size}));
    }
    @if $direction {
      border-#{$direction}-width: var(--space-#{$size});
    } @else {
      border-width: var(--space-#{$size});
    }
  }

  &::after {
    color: inherit;
    font-size: var(--step--2);
    opacity: 0.5;
    @if $direction {
      content: '#{$type}-#{$direction}: #{to-upper-case($size)}';
    } @else {
      content: '#{$type}: #{to-upper-case($size)}';
    }

    @if $type == 'margin' {
      // Move visualiser border outside element
      inset-#{$direction}: calc(-1 * var(--space-#{$size}));
    }
  }
}

@each $size, $color in $sizes {
  @each $type in $types {
    .u-#{$type}--#{$size} {
      @include spacer-visualiser($size, $color, $type);
      #{$type}: var(--space-#{$size});
    }
    @each $direction in $directions {
      .u-#{$type}-#{$direction}--#{$size} {
        @include spacer-visualiser($size, $color, $type, $direction);
        #{$type}-#{$direction}: var(--space-#{$size});
      }
    }
  }
}
